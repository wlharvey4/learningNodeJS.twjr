\input texinfo @c -*- texinfo -*-

@c ==================================================
@c NAME:    LearningNodeJS.twjr
@c VERSION: 2018-02-19T05:44:39 ver. 0.0.1
@c DESC:    Learning Node.js 2nd Ed.
@c BY:      Marc Wandschneider
@c NOTES:   
@c ==================================================

@c %**start of header
@c edit
@setfilename LearningNodeJS.info
@c edit
@settitle Learning Node.js
@c %**end of header

@c ====================
@c texiwebjr specials
@c ====================
@c Changes how xref titles are quoted.
@dquotexrefs

@c Lets braces in index entries work.
@allowindexbraces

@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c ====================
@c DOCUMENT CONSTANTS
@c ====================
@set UPDATE-MONTH FEBRUARY 2018
@set EDITION 0.0.1
@set AUTHOR Marc Wandschneider
@set TITLE Learning Node.js
@set SHORTTITLE Learning Node.js
@set SUBTITLE A Hands-On Guide to Building Web Applications in JavaScript
@set COPYRIGHT_YEAR 2017
@set COPYRIGHT_HOLDER Pearson Eduction, Inc.

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c ====================
@c FINALOUT
@c ====================
@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c |@finalout|
@end iftex

@c ====================
@c SUMMARY & COPYRIGHT INFORMATION
@c ====================
@copying
@c insert a short summary describing and identifying this document in a
@c sentence or two, and add the copyright notice and copying permisions

This document is @value{TITLE} @sp 2
This document does outlines this book.

Copyright @copyright{} @value{COPYRIGHT_YEAR} LOLH @*
by @value{COPYRIGHT_HOLDER} @*
All Rights Reserved

@quotation
Permission is granted to read this outline.
@end quotation

@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.

@c use @insertcopying later to 'emit' this copying information in a TeX
@c or plain text document; add to the Top node for use in Info or HTML file
@end copying

@c ====================
@c TITLEPAGE, COPYRIGHT PAGE, TOC PAGE, HEADINGS
@c ====================
@titlepage

@title @value{TITLE}
@subtitle @value{SUBTITLE}
@c @subtitle Additional Subtitle
@author @value{AUTHOR}

@c place the copyright information on the backside of the titlepage
@c (printed manual only)
@page
@vskip 0pt plus 1filll
@insertcopying

Published by LOLH.

@end titlepage
@c page numbering and headings start after end of titlepage

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@c TOC in the printed manual
@c consider placing TOC after the main menu
@c consider including summarycontents here or after main menu
@c @summarycontents
@contents

@c ====================
@c TOP NODE, MASTER MENU
@c ====================
@ifnottex
@ifnotdocbook
@ifnotxml
@node Top
@top Learning Node.js

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex

@c ====================
@c START OF BODY
@c ====================

@c Preface and Foreward come right after Top node in 'unnumbered' sections
@c consider commenting out Foreward and Preface
@menu

@detailmenu
 --- The Detailed Node Listing ---

@end detailmenu

@end menu

@node Preface
@unnumbered Preface

@node Overview
@unnumberedsec Overview

Text and chapter by chapter description here.

@node Conventions
@unnumberedsec Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo

@c ====================
@c MAIN BODY NODES
@c ====================

@node Introduction
@unnumbered Introduction

@file{Node.js} is an exciting platform for writing applications of all
sorts, ranging from powerful web applications to simple scripts you can
run on your local computer.  The project has grown from a reasonably
small software package managed by one company into a production-quality
system governed by a Technical Steering Committee (TSC) and has a
sezeable following in the development community.  In this book the
author teachers you more about it and why it is special, then gets you
up and writing @file{Node.js} programs in short order.

@heading Why @file{Node.js}?

@file{Node.js} has arisen for a couple of primary reasons.

@subheading The Web
@cindex web applications, writing

In the past, writing web applications was a pretty standard process.
You have one or more servers on your machine that listen on a @dfn{port}
(for example, @code{80} for HTTP), and when a request is received, it
forks a new process or a thread to begin processing and responding to
the query.  This work frequently involves communicating with external
services, such as database, memory cache, external computing server, or
even just the file system.  When all this work is finally finished, the
thread or process is returned to the pool of available servers, and more
requests can be handled.

It is a reasonably linear process, easy to understand, and
straightforward to code.  There are, however, a couple of disadvantages
that continue to plague this model:

@cindex web applications, disadvantages

@itemize
@item
Each of these threads or processes carries some overhead with it.  On
some machines, PHP and Apache can take up as much as 10-15 MB per
process.  Even in environments where a large server runs constantly and
forks threads to process the requests, each of these carries some
overhead to create a new stack and execution environment, and you
frequently run into the limits of the server's available memory.
@item
In most common usage scenarios where a web server communicates with a
database, caching server, external server, or file system, it spends
most of its time sitting around doing nothing and waits for these
services to finish and return their responses.  While it is sitting
there doing nothing, this thread is effectively blocked from doing
anything else.  The resources it consumes and the process or thread in
which it runs are entirely frozen waiting for these responses to come
back.
@end itemize

Only after the external component has finally sent back its response
will that process or thread be free to finish processing, send a
response to the client, and then reset to prepare for another incoming
request.

So, although it's pretty easy to understand and work with, you do have a
model that can be quite inefficient if your scripts spend most of their
time waiting for database servers to finish running a queue---an
extremely common scenario for many modern web applications.

Many solutions to this problem have been developed are in common use.
You can buy ever bigger and more powerful web servers with more memory.
You can replace more powerful and feature-rich HTTP servers such as
Apache with smaller, lightweight ones such as @samp{lighttpd} or
@samp{nginx}.  You can build stripped-down or reduced versions of your
favorite web programming language such as PHP or Python (indeed, for a
time Facebook took this one step further and built a system that
converts PHP to native C++ code for maximal speed and optimal size).  Or
you can throw more servers at the problem to increase the number of
simultaneous connections you can accommodate.

@subheading New Technologies

JavaScript @dots{}

With all these things in place, the opportunity arose for somebody to
come along with a new approach to network (web) application
development.  Thus, the birth of @file{Node.js}.

@heading What Exactly is Node.js?
@cindex Node.js, what is it
@cindex V8 runtime

In 2009 Ryan Dahl was working for Joyent, a cloud and virtualization
services company; he was looking to develop push capabilities for web
applications, similar to how Gmail does it, and found most of what he
looked at not quite appropriate.  He settled on JavaScript because it
lacked a robust input/output model (meaning he could write his own new
one), and had the fast and fully programmable V8 runtime readily
available.

@cindex Chrome V8 runtime
@cindex libev
@cindex event-processing library
@cindex event-driven non-blocking model

Inspired by some similar projects in the Ruby and Python communities, he
eventually took the Chrome V8 runtime and an event-processing library
called @file{libev} and came up with the first versions of a new system
called @file{Node.js}.  The primary methodology or innovation in
@file{Node.js} is that it is built entirely around an event-driven,
non-blocking model of programming.  In short, you never (well, rarely)
write code that blocks.

If your web application --- in order to process a request and generate a
response --- needs to run a database query, it runs the request and then
tells @file{Node.js} what to do when the response returns.  In the
meantime, your code is free to start processing other incoming requests
or, indeed, do any other task it might need, such as cleaning up data or
running analyses.

@cindex single process
@cindex single thread

Through this simple change in the way the application handles requests
and work, you are able to easily write web servers that can handle
hundreds, if not thousands, of requests simultaneously on machines
without much processing or memory resources.  @file{Node} runs in a
single process, and your code executes largely in a single thread, so
the resource requirements are much lower than for many other platforms.

@cindex caveats

This speed and capacity come with a few caveats, however, and you need
to be fully aware of them so you can start working with @file{Node} with
your eyes wide open.

@cindex core patterns
@cindex asynchronous code
@cindex nonblocking code

First and foremost, the new model is different from what you may have
seen before and can sometimes be a bit confusing; some code you see
written in @file{Node.js} can seem a bit strange.  Much of this book is
devoted to discussing the core patterns many programmers use to manage
the challenges of the asynchronous, nonblocking way of programming that
@file{Node} uses and how to develop your own.

@node |Chapter One|
@chapter |Chapter One|
@cindex chapter one

Chapter one...

@menu
* |Section One|::
@end menu

@node |Section One|
@section |Chapter One Section One|
@cindex section one

Chapter One Section one...

@c ====================
@c APPENDICES
@c ====================

@node Appendix One
@appendix Appendix One

@node Meta Appendix
@appendix Meta (Makefile) Appendix

@menu
* Makefile::
@end menu

@node Makefile Definitions
@appendixsec Makefile Initial Definitions

@(Makefile@)=
@<Makefile Constants@>
@<Makefile Default Targets@>
@<Makefile Tangle@>
@<Makefile Weave@>
@<Makefile Info@>
@<Makefile Clean@>
@<Makefile Dist Clean@>
@<Makefile Directory Creation@>
@<Makefile Move Hook@>
@<Makefile Move JS To Source@>
@<Makefile Move HTML@>
@

@menu
* Makefile Constants::
* Makefile Default Targets::
* Makefile Tangle::
* Makefile Weave::
* Makefile Info::
* Makefile Clean::
* Makefile Dist Clean::
* Makefile Move Hook::
* Makefile Move JS::
* Makefile Move HTML::
@end menu

@node Makefile Constants
@appendixsubsec Makefile Constant Definitions

@<Makefile Constants@>=
@<Makefile Directory Definitions@>
@<Makefile Filename Definitions@>
@

@menu
* Directory Definitions::
* Filename Definitions::
@end menu

@node Directory Definitions
@appendixsubsubsec Makefile Directory Definitions

@<Makefile Directory Definitions@>=
PREFIX := .
SOURCE_DIR := ${PREFIX}/src
PUBLIC_DIR := ${PREFIX}/public
HTML_DIR := ${PREFIX}/html

@

@node Filename Definitions
@appendixsubsubsec Makefile Filename Definitions

@<Makefile Filename Definitions@>=
FILENAME := twjrtemplate
TWJR_FILENAME := ${FILENAME}.twjr
TEXI_FILENAME := ${FILENAME}.texi
INFO_FILENAME := ${FILENAME}.info

@

@node Makefile Default Targets
@appendixsubsec Makefile Default Targets

@<Makefile Default Targets@>=
.Phony : all
all : tangle weave

@

@node Makefile Tangle
@appendixsubsubsec Makefile Tangle

@<Makefile Tangle@>=
.Phony : tangle
tangle :
	jrtangle ${TWJR_FILENAME}

@

@node Makefile Weave
@appendixsubsubsec Meta Weave

@<Makefile Weave@>=
.Phony : weave
weave : ${TEXI_FILENAME}

${TEXI_FILENAME} : ${TWJR_FILENAME}
	jrweave ${TWJR_FILENAME} > ${TEXI_FILENAME}

@

@node Makefile Info
@appendixsubsubsec Makefile Info

@<Makefile Info@>=
.Phony : info
info : ${INFO_FILENAME}

${INFO_FILENAME} : ${TEXI_FILENAME}
	makeinfo ${TEXI_FILENAME}

@

@node Makefile Clean Targets
@appendixsubsec Makefile Clean Targets

@node Makefile Clean
@appendixsubsubsec Makefile Clean Definition

@<Makefile Clean@>=
.Phony : clean
clean :
	rm -f *~

@

@node Makefile Dist Clean
@appendixsubsubsec Meta Dist Clean Definition

@<Makefile Dist Clean@>=
.Phony : dist-clean
dist-clean : clean
	rm -f *.texi
	rm -f *.info

@

@node Makefile Directory Creation
@appendixsubsec Makefile Directory Creation Targets

@<Makefile Directory Creation@>=
.Phony : ${SOURCE_DIR}
${SOURCE_DIR} :
	mkdir -p ${SOURCE_DIR}

.Phony : ${PUBLIC_DIR}
${PUBLIC_DIR} :
	mkdir -p ${PUBLIC_DIR}

.Phony : ${HTML_DIR}
${HTML_DIR} :
	mkdir -p ${HTML_DIR}

@

@node Makefile Move Targets
@appendixsubsec Makefile Move Targets

@node Makefile Move Hook
@appendixsubsubsec Makefile Move Hook

Use this hook for moving files to a different directory
than Source; it will execute just prior to the next
code block moving all .js files to Source.

@<Makefile Move Hook@>=
@

@node Makefile Move JS
@appendixsubsubsec Makefile Move JS To Source

@<Makefile Move JS To Source@>=
.Phony : move-js-to-source
move-js-to-source : | ${SOURCE_DIR}
	find ${PREFIX} -depth=1 -name \*.js -exec mv {} ${SOURCE_DIR} \;

@

@node Makefile Move HTML
@appendixsubsubsec Makefile Move HTML

@<Makefile Move HTML@>=
.Phony : move-html
move-html : | ${HTML_DIR}
	find ${PREFIX} -depth=1 -name \*.html -exec mv {} ${HTML_DIR}\;

@

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::
* Code Chunk Definitions::
* Code Chunk References::
@end menu

@node File Definitions
@appendixsec Source File Definitions

@print_file_defs

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs

@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs

@c ====================
@c BIBLIOGRAPHY; INDEX; END
@c ====================

@node Bibliography
@unnumbered Bibliography

@node Concept Index
@unnumbered Index

@node Index
@unnumbered Index

@printindex cp

@bye

@c ====================
@c TODOs
@c ====================

1. Create a script to fill in named variables
1.1 twjr
1.1.1 init [--dir <directory>]
1.1.2 config
1.1.3 weave [--info --pdf --html --xml --docbook]
1.1.4 tangle [--file <filename>]
